name: Development CI

on:
  push:
    branches: ['PBI-*']

jobs:
  test:
    name: Tests & Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true
      
      - name: Create .env file
        run: |
          echo "FLAVOR=dev" > .env
          echo "STAGING_FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> .env
          echo "STAGING_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "STAGING_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_APP_ID=${{ secrets.STAGING_FIREBASE_WEB_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_API_KEY=${{ secrets.STAGING_FIREBASE_WEB_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}" >> .env

      - name: Get dependencies
        run: flutter pub get
        
      - name: Store Flutter Analyze Results
        id: analyze
        run: |
          mkdir -p analysis-results
          flutter analyze > analysis-results/flutter-analyze.txt || echo "analyze_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true
          
      - name: Install junitreport for test results
        run: dart pub global activate junitreport
        
      - name: Run tests with coverage and generate JUnit report
        run: |
          mkdir -p test-results
          flutter test --coverage --machine | tee test_output.json
          dart pub global run junitreport:tojunit --input test_output.json --output test-results/junit-results.xml
        
      - name: Generate combined HTML report
        run: |
          mkdir -p reports
          
          # Create HTML report
          cat > reports/index.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Flutter Project Report</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 0;
                padding: 20px;
                color: #333;
              }
              .header {
                background: linear-gradient(to right, #0175C2, #02569B);
                color: white;
                padding: 20px;
                border-radius: 5px;
                margin-bottom: 20px;
              }
              h1, h2, h3 {
                color: #0175C2;
              }
              .header h1 {
                color: white;
                margin: 0;
              }
              .summary {
                display: flex;
                gap: 20px;
                flex-wrap: wrap;
                margin-bottom: 20px;
              }
              .summary-card {
                background: #f5f5f5;
                border-radius: 5px;
                padding: 15px;
                flex: 1;
                min-width: 200px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
              }
              .card-title {
                font-weight: bold;
                margin-bottom: 10px;
                border-bottom: 1px solid #ddd;
                padding-bottom: 5px;
              }
              .tests-section, .analyze-section {
                margin-bottom: 30px;
                background: white;
                padding: 20px;
                border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
              }
              .test-result {
                margin-bottom: 10px;
                padding: 10px;
                border-radius: 5px;
              }
              .test-pass {
                background-color: #e8f5e9;
                border-left: 5px solid #4caf50;
              }
              .test-fail {
                background-color: #ffebee;
                border-left: 5px solid #f44336;
              }
              .error { color: #d32f2f; }
              .warning { color: #f57c00; }
              .info { color: #0288d1; }
              pre {
                background-color: #f5f5f5;
                padding: 10px;
                border-radius: 5px;
                overflow-x: auto;
              }
              .footer {
                margin-top: 30px;
                text-align: center;
                color: #666;
                font-size: 0.9em;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>Flutter Project Quality Report</h1>
              <p>Generated: <span id="generated-date"></span></p>
              <script>
                document.getElementById('generated-date').textContent = new Date().toLocaleString();
              </script>
            </div>
            
            <div class="summary">
              <div class="summary-card">
                <div class="card-title">Test Summary</div>
          EOL
          
          # Process JUnit XML to extract test data for HTML report
          if [ -f "test-results/junit-results.xml" ]; then
            # Get total tests
            TOTAL_TESTS=$(grep -c "<testcase" test-results/junit-results.xml || echo "0")
            # Get failed tests
            FAILED_TESTS=$(grep -c "<failure" test-results/junit-results.xml || echo "0")
            # Calculate passed tests
            PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))
            # Calculate success percentage
            if [ "$TOTAL_TESTS" -gt 0 ]; then
              SUCCESS_PERCENT=$((PASSED_TESTS * 100 / TOTAL_TESTS))
            else
              SUCCESS_PERCENT=0
            fi
            
            echo "<p><strong>Total Tests:</strong> $TOTAL_TESTS</p>" >> reports/index.html
            echo "<p><strong>Passed:</strong> $PASSED_TESTS</p>" >> reports/index.html
            echo "<p><strong>Failed:</strong> $FAILED_TESTS</p>" >> reports/index.html
            echo "<p><strong>Success Rate:</strong> $SUCCESS_PERCENT%</p>" >> reports/index.html
          else
            echo "<p>No test results found.</p>" >> reports/index.html
          fi
          
          cat >> reports/index.html << 'EOL'
              </div>
              <div class="summary-card">
                <div class="card-title">Analysis Summary</div>
          EOL
          
          # Process Flutter analyze output
          if [ -f "analysis-results/flutter-analyze.txt" ]; then
            ERRORS=$(grep -c "error" analysis-results/flutter-analyze.txt || echo "0")
            WARNINGS=$(grep -c "warning" analysis-results/flutter-analyze.txt || echo "0")
            INFOS=$(grep -c "info" analysis-results/flutter-analyze.txt || echo "0")
            
            echo "<p><strong>Errors:</strong> <span class=\"error\">$ERRORS</span></p>" >> reports/index.html
            echo "<p><strong>Warnings:</strong> <span class=\"warning\">$WARNINGS</span></p>" >> reports/index.html
            echo "<p><strong>Info:</strong> <span class=\"info\">$INFOS</span></p>" >> reports/index.html
          else
            echo "<p>No analysis results found.</p>" >> reports/index.html
          fi
          
          # Add coverage information
          if [ -f "coverage/lcov.info" ]; then
            # Get branch name
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            
            cat >> reports/index.html << EOL
              </div>
              <div class="summary-card">
                <div class="card-title">Coverage Summary</div>
                <p><strong>Branch:</strong> $BRANCH_NAME</p>
                <p><strong>Coverage Link:</strong> <a href="https://codecov.io/gh/${{ github.repository }}/branch/$BRANCH_NAME">Codecov Report</a></p>
              </div>
          EOL
          else
            echo "</div>" >> reports/index.html
          fi
          
          cat >> reports/index.html << 'EOL'
            </div>
            
            <div class="tests-section">
              <h2>Test Results</h2>
          EOL
          
          # Add test details from JUnit file
          if [ -f "test-results/junit-results.xml" ]; then
            # Extract and format test cases
            grep -A 3 "<testcase" test-results/junit-results.xml | sed 's/--/\n/g' | while read -r line; do
              if [[ $line == *"<testcase"* ]]; then
                # Extract test name
                TEST_NAME=$(echo "$line" | grep -o 'name="[^"]*"' | sed 's/name="//;s/"$//')
                # Check if the next lines contain a failure
                NEXT_LINES=$(echo "$line" | grep -A 2 "<testcase")
                if [[ $NEXT_LINES == *"<failure"* ]]; then
                  echo "<div class=\"test-result test-fail\">" >> reports/index.html
                  echo "<strong>‚ùå $TEST_NAME</strong>" >> reports/index.html
                  
                  # Extract failure message if present
                  FAILURE_MSG=$(echo "$NEXT_LINES" | grep -o 'message="[^"]*"' | sed 's/message="//;s/"$//')
                  if [ ! -z "$FAILURE_MSG" ]; then
                    echo "<p class=\"error\">$FAILURE_MSG</p>" >> reports/index.html
                  fi
                else
                  echo "<div class=\"test-result test-pass\">" >> reports/index.html
                  echo "<strong>‚úÖ $TEST_NAME</strong>" >> reports/index.html
                fi
                echo "</div>" >> reports/index.html
              fi
            done
          else
            echo "<p>No detailed test results available.</p>" >> reports/index.html
          fi
          
          cat >> reports/index.html << 'EOL'
            </div>
            
            <div class="analyze-section">
              <h2>Static Analysis</h2>
          EOL
          
          # Add Flutter analyze results
          if [ -f "analysis-results/flutter-analyze.txt" ]; then
            echo "<pre>" >> reports/index.html
            cat analysis-results/flutter-analyze.txt | sed 's/\x1B\[[0-9;]*[JKmsu]//g' | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g' >> reports/index.html
            echo "</pre>" >> reports/index.html
          else
            echo "<p>No static analysis results available.</p>" >> reports/index.html
          fi
          
          # Close HTML
          cat >> reports/index.html << 'EOL'
            </div>
            
            <div class="footer">
              <p>Generated by Flutter CI Pipeline</p>
            </div>
          </body>
          </html>
          EOL
          
      - name: Upload Combined HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: flutter-quality-report
          path: reports/index.html
          
      - name: Fix JUnit XML for Codecov
        run: |
          mkdir -p junit-reports
          cp test-results/junit-results.xml junit-reports/junit.xml
          
      - name: Prepare coverage report
        run: |
          mkdir -p coverage/combined
          cp coverage/lcov.info coverage/combined/lcov.info
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/combined/lcov.info
          fail_ci_if_error: true
      
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          search_dir: junit-reports
          
      - name: Display Codecov link
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          REPO_NAME="${{ github.repository }}"
          echo "Code Coverage Report: https://codecov.io/gh/${REPO_NAME}/branch/${BRANCH_NAME}"
          
      - name: Check if analyze failed
        if: steps.analyze.outputs.analyze_failed == 'true'
        run: exit 1

  build:
    name: Build Debug APK
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'
          cache: true
          
      - name: Create .env file
        run: |
          echo "FLAVOR=dev" > .env
          echo "STAGING_FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> .env
          echo "STAGING_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "STAGING_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_APP_ID=${{ secrets.STAGING_FIREBASE_WEB_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_API_KEY=${{ secrets.STAGING_FIREBASE_WEB_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}" >> .env
      
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build Debug APK
        run: flutter build apk --debug
        
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: build/app/outputs/flutter-apk/app-debug.apk