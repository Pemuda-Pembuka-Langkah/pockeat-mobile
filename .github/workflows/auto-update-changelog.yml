name: Auto Update Changelog

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  update-changelog:
    name: Update Changelog with Claude
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need all git history for comparing changes

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install anthropic pyyaml

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep -m 1 "version:" pubspec.yaml | sed 's/version://g' | awk -F'+' '{print $1}' | xargs)
          echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: v$VERSION"

      - name: Get latest commits
        id: get_commits
        run: |
          # Get commits since the last tag or last 20 commits if no tags
          if git describe --tags --abbrev=0 &>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "Getting commits since $LAST_TAG"
            COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
          else
            echo "No tags found, getting last 20 commits"
            COMMITS=$(git log -n 20 --pretty=format:"%s")
          fi
          
          # Save commits to a temporary file (multi-line output handling)
          echo "$COMMITS" > commits.txt
          echo "Collected commits for analysis"

      - name: Generate changelog with Claude
        id: generate_changelog
        run: |
          cat > update_changelog.py << 'EOF'
          import os
          import re
          import yaml
          from datetime import datetime

          # Setup Claude API
          from anthropic import Anthropic
          claude = Anthropic(api_key=os.environ['CLAUDE_API_KEY'])
          model_name = os.environ.get('CLAUDE_MODEL', 'claude-3-7-sonnet-20250219')  # Default to Claude 3.7 Sonnet

          # Get current date in the required format
          current_date = datetime.now().strftime("%B %d, %Y")

          # Read version from pubspec
          version = os.environ['VERSION']

          # Read commits from file
          with open('commits.txt', 'r') as f:
              commits = f.read().strip()
              if not commits:
                  print("No commits found, exiting")
                  exit(0)

          # Read current changelog
          with open('CHANGELOG.md', 'r') as f:
              current_changelog = f.read()

          # Check if version already exists in changelog
          if version in current_changelog:
              print(f"Version {version} already exists in CHANGELOG.md, exiting")
              exit(0)

          # Extract existing changelog format
          existing_format = ""
          if current_changelog:
              # Get first 2 entries as reference
              entries = re.findall(r'## v\d+\.\d+\.\d+[\s\S]+?(?=## v\d+\.\d+\.\d+|$)', current_changelog)
              if entries and len(entries) >= 1:
                  existing_format = entries[0]
                  if len(entries) >= 2:
                      existing_format += "\n" + entries[1]
          
          # Prepare prompt for Claude
          prompt = f"""
          Based on these commit messages:

          {commits}
          
          Generate a changelog entry for version {version} with the following structure:
          
          ## {version}
          **Release Date: {current_date}**

          ### Features
          - List of feature additions or improvements
          
          ### Bug Fixes
          - List of bug fixes
          
          Here are examples of previous changelog entries to match the style and format:
          
          {existing_format}
          
          Note:
          1. If there are no items for a section, omit that section entirely.
          2. Use a bullet point format with clear, concise descriptions.
          3. Sort the entries by importance.
          4. Merge similar commits into one bullet point.
          5. Write in Bahasa Indonesia or English, matching the language of the commit messages.
          6. Format the output as valid Markdown.
          7. Match the tone and style of the existing changelog entries.
          """

          # Generate content with Claude
          response = claude.messages.create(
              model=model_name,
              max_tokens=1000,
              system="You are a helpful assistant that generates structured changelog entries based on commit messages.",
              messages=[
                  {"role": "user", "content": prompt}
              ]
          )
          changelog_content = response.content[0].text

          # Make sure it's formatted correctly
          if not changelog_content.startswith('##'):
              changelog_content = f"## {version}\n**Release Date: {current_date}**\n\n" + changelog_content

          # Insert at the top of the changelog (after the title)
          if "# Changelog" in current_changelog:
              updated_changelog = re.sub(r'# Changelog\n', f'# Changelog\n{changelog_content}\n\n', current_changelog)
          else:
              updated_changelog = f"# Changelog\n{changelog_content}\n\n" + current_changelog

          # Write updated changelog
          with open('CHANGELOG.md', 'w') as f:
              f.write(updated_changelog)
              
          # Ambil konten changelog untuk PR
          with open('/tmp/changelog_entry.txt', 'w') as f:
              f.write(changelog_content)
              
          print("Changelog updated successfully")
          EOF

          python update_changelog.py
          
          # Cek apakah file changelog ada & diupdate
          if [ -f "/tmp/changelog_entry.txt" ]; then
            echo "changelog_updated=true" >> $GITHUB_OUTPUT
            # Simpan isi untuk PR body
            CHANGELOG_CONTENT=$(cat /tmp/changelog_entry.txt)
            # Escape multiline content untuk GitHub Actions output
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT//'%'/'%25'}"
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\n'/'%0A'}"
            CHANGELOG_CONTENT="${CHANGELOG_CONTENT//$'\r'/'%0D'}"
            echo "changelog_content=$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "Changelog has been updated"
          else
            echo "changelog_updated=false" >> $GITHUB_OUTPUT
            echo "Changelog was not updated, likely version already exists"
          fi
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          CLAUDE_MODEL: ${{ secrets.CLAUDE_MODEL || 'claude-3-7-sonnet-20250219' }}
          VERSION: ${{ steps.extract_version.outputs.VERSION }}

      # Tambahkan langkah cleanup untuk menghapus file-file sementara
      - name: Cleanup temporary files
        if: always()
        run: |
          rm -f commits.txt
          rm -f update_changelog.py
          rm -f /tmp/changelog_entry.txt
          echo "Cleaned up temporary files"

      - name: Create PR with changelog update
        if: steps.generate_changelog.outputs.changelog_updated == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "docs: update CHANGELOG.md for ${{ steps.extract_version.outputs.VERSION }}"
          title: "docs: update CHANGELOG.md for ${{ steps.extract_version.outputs.VERSION }}"
          body: |
            This PR automatically updates the CHANGELOG.md file based on recent commits.
            
            The changelog has been generated using Claude AI to analyze commit messages and categorize changes appropriately.
            
            ### Changes:
            ```markdown
            ${{ steps.generate_changelog.outputs.changelog_content }}
            ```
            
            Please review the changes and merge if they look good.
          branch: auto-update-changelog
          base: master
          labels: documentation, automated-pr
          delete-branch: false
