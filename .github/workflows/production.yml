name: Production CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    name: Tests & Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true

      - name: Create .env file
        run: |
          echo "FLAVOR=production" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env
          echo "PRODUCTION_FIREBASE_PROJECT_ID=${{ secrets.PRODUCTION_FIREBASE_PROJECT_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PRODUCTION_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_STORAGE_BUCKET=${{ secrets.PRODUCTION_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "PRODUCTION_FIREBASE_ANDROID_APP_ID=${{ secrets.PRODUCTION_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_ANDROID_API_KEY=${{ secrets.PRODUCTION_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_APP_ID=${{ secrets.PRODUCTION_FIREBASE_IOS_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_API_KEY=${{ secrets.PRODUCTION_FIREBASE_IOS_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_BUNDLE_ID=${{ secrets.PRODUCTION_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_WEB_APP_ID=${{ secrets.PRODUCTION_FIREBASE_WEB_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_WEB_API_KEY=${{ secrets.PRODUCTION_FIREBASE_WEB_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_AUTH_DOMAIN=${{ secrets.PRODUCTION_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "INSTABUG_TOKEN=${{ secrets.PRODUCTION_INSTABUG_TOKEN }}" >> .env

      - name: Get dependencies
        run: flutter pub get

      - name: Generate mocks with build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run Flutter Analyze for Report
        run: |
          mkdir -p analysis-results
          flutter analyze --no-fatal-warnings --no-fatal-infos > analysis-results/flutter-analyze.txt || true

      - name: Install junitreport for test results
        run: dart pub global activate junitreport

      - name: Run tests with coverage and generate JUnit report
        run: |
          mkdir -p test-results
          flutter test --coverage --machine | tee test_output.json
          dart pub global run junitreport:tojunit --input test_output.json --output test-results/junit_flutter_tests.xml

      - name: Prepare coverage report
        run: |
          mkdir -p coverage/combined
          cp coverage/lcov.info coverage/combined/lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/combined/lcov.info
          fail_ci_if_error: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: test-results/junit_flutter_tests.xml

      - name: Display Codecov link
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          fi
          REPO_NAME="${{ github.repository }}"
          echo "Code Coverage Report: https://codecov.io/gh/${REPO_NAME}/branch/${BRANCH_NAME}"

      - name: Run Flutter Test for CI Failure
        run: flutter test

      - name: Run Flutter Analyze for CI Failure
        run: flutter analyze --no-fatal-warnings --no-fatal-infos

      - name: Check Functions Folder
        id: check_functions
        run: |
          if [ -d "functions" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_functions.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: functions/package-lock.json

      - name: Test Firebase Functions
        if: steps.check_functions.outputs.exists == 'true'
        working-directory: functions
        run: |
          npm install
          npm test

  build:
    name: Build Production APK
    needs: test
    if: ${{ success() }} # Memastikan build hanya dijalankan jika test sukses
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true

      - name: Create .env file
        run: |
          echo "FLAVOR=production" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env
          echo "PRODUCTION_FIREBASE_PROJECT_ID=${{ secrets.PRODUCTION_FIREBASE_PROJECT_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PRODUCTION_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_STORAGE_BUCKET=${{ secrets.PRODUCTION_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "PRODUCTION_FIREBASE_ANDROID_APP_ID=${{ secrets.PRODUCTION_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_ANDROID_API_KEY=${{ secrets.PRODUCTION_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_APP_ID=${{ secrets.PRODUCTION_FIREBASE_IOS_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_API_KEY=${{ secrets.PRODUCTION_FIREBASE_IOS_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_IOS_BUNDLE_ID=${{ secrets.PRODUCTION_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_WEB_APP_ID=${{ secrets.PRODUCTION_FIREBASE_WEB_APP_ID }}" >> .env
          echo "PRODUCTION_FIREBASE_WEB_API_KEY=${{ secrets.PRODUCTION_FIREBASE_WEB_API_KEY }}" >> .env
          echo "PRODUCTION_FIREBASE_AUTH_DOMAIN=${{ secrets.PRODUCTION_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "INSTABUG_TOKEN=${{ secrets.PRODUCTION_INSTABUG_TOKEN }}" >> .env

      - name: Get dependencies
        run: flutter pub get

      # Setup Google Services JSON
      - name: Setup Google Services JSON
        run: |
          echo '${{ secrets.PRODUCTION_GOOGLE_SERVICES_JSON }}' > android/app/google-services.json

      # Setup keystore
      - name: Setup keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          echo "storeFile=keystore.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties

      - name: Build Production APK
        run: flutter build apk --release

      - name: Upload Production APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-production
          path: build/app/outputs/flutter-apk/app-release.apk
