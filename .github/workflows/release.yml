name: Release CI

on:
  push:
    tags: ["v*"]

# Ensure CHANGELOG.md is readable
permissions:
  contents: write

jobs:
  test:
    name: Tests & Analysis
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true

      - name: Create .env file
        run: |
          echo "FLAVOR=staging" > .env
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "STAGING_FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> .env
          echo "STAGING_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "STAGING_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_APP_ID=${{ secrets.STAGING_FIREBASE_WEB_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_API_KEY=${{ secrets.STAGING_FIREBASE_WEB_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "INSTABUG_TOKEN=${{ secrets.STAGING_INSTABUG_TOKEN }}" >> .env

      - name: Get dependencies
        run: flutter pub get

      - name: Generate mocks with build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Run tests
        run: flutter test

      - name: Run Flutter Analyze for CI Failure
        run: flutter analyze --no-fatal-warnings --no-fatal-infos

      - name: Check Functions Folder
        id: check_functions
        run: |
          if [ -d "functions" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_functions.outputs.exists == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: functions/package-lock.json

      - name: Test Firebase Functions
        if: steps.check_functions.outputs.exists == 'true'
        working-directory: functions
        run: |
          npm install
          npm test

  build-and-distribute:
    name: Build & Distribute
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"
          cache: true

      - name: Create .env file
        run: |
          echo "FLAVOR=staging" > .env
          echo "API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "STAGING_FIREBASE_PROJECT_ID=${{ secrets.STAGING_FIREBASE_PROJECT_ID }}" >> .env
          echo "STAGING_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}" >> .env
          echo "STAGING_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGING_FIREBASE_STORAGE_BUCKET }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_APP_ID=${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_ANDROID_API_KEY=${{ secrets.STAGING_FIREBASE_ANDROID_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_APP_ID=${{ secrets.STAGING_FIREBASE_IOS_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_IOS_API_KEY=${{ secrets.STAGING_FIREBASE_IOS_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_IOS_BUNDLE_ID=${{ secrets.STAGING_FIREBASE_IOS_BUNDLE_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_APP_ID=${{ secrets.STAGING_FIREBASE_WEB_APP_ID }}" >> .env
          echo "STAGING_FIREBASE_WEB_API_KEY=${{ secrets.STAGING_FIREBASE_WEB_API_KEY }}" >> .env
          echo "STAGING_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGING_FIREBASE_AUTH_DOMAIN }}" >> .env
          echo "INSTABUG_TOKEN=${{ secrets.STAGING_INSTABUG_TOKEN }}" >> .env

      - name: Get dependencies
        run: flutter pub get

      - name: Generate mocks with build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs

      # Setup Google Services JSON
      - name: Setup Google Services JSON
        run: |
          echo '${{ secrets.STAGING_GOOGLE_SERVICES_JSON }}' > android/app/google-services.json

      # Setup keystore
      - name: Setup keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          echo "storeFile=keystore.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=upload" >> android/key.properties
          echo "keyPassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties

      - name: Build Release APK
        run: flutter build apk --release

      - name: Build Release AAB
        run: flutter build appbundle --release

      # Get APK file size
      - name: Get APK file size
        id: apk_size
        run: |
          APK_SIZE=$(stat -c%s "build/app/outputs/flutter-apk/app-release.apk")
          echo "size=$APK_SIZE" >> $GITHUB_OUTPUT

      # Analisis tambahan untuk memastikan kualitas
      - name: Run Flutter Analyze for CI Failure
        run: flutter analyze --no-fatal-warnings --no-fatal-infos

      # Extract tag version
      - name: Get version from tag
        id: get_version
        run: |
          # Simpan full tag (ex: v1.1.2)
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          # Simpan versi tanpa 'v' (ex: 1.1.2) untuk Firebase
          echo "VERSION_NO_V=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          # Extract version code from pubspec.yaml
          VERSION_CODE=$(grep -E 'version:.*\+[0-9]+' pubspec.yaml | grep -oE '\+[0-9]+' | grep -oE '[0-9]+')
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT

      # Extract release notes from CHANGELOG.md
      - name: Extract changelog for current version
        id: extract_changelog
        run: |
          VERSION=$(echo ${GITHUB_REF#refs/tags/v} | sed 's/\.0*\./\./g')
          echo "Looking for version $VERSION in CHANGELOG.md"
          SECTION=$(sed -n "/## v$VERSION/,/## v[0-9]/p" CHANGELOG.md | sed '$d')
          # If section is empty, use a fallback message
          if [ -z "$SECTION" ]; then
            SECTION="Release version ${{ steps.get_version.outputs.VERSION }}"
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Upload to GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.extract_changelog.outputs.CHANGELOG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload APK to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.STAGING_FIREBASE_ANDROID_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          file: build/app/outputs/flutter-apk/app-release.apk
          releaseNotes: ${{ steps.extract_changelog.outputs.CHANGELOG }}
          releaseNumber: ${{ steps.get_version.outputs.VERSION_NO_V }}
      
      # Update Pockeat Web API with the new APK information
      - name: Update Pockeat Web APK Database
        id: update_pockeat_web
        uses: fjogeleit/http-request-action@v1
        with:
          url: '${{ secrets.POCKEAT_WEB_API_URL }}/api/apk/upload'
          method: 'POST'
          contentType: 'application/json'
          data: >
            {
              "version": "${{ steps.get_version.outputs.VERSION_NO_V }}",
              "versionCode": ${{ steps.get_version.outputs.VERSION_CODE }},
              "fileSize": ${{ steps.apk_size.outputs.size }},
              "fileUrl": "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/app-release.apk",
              "releaseDate": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "releaseNotes": ${{ toJSON(steps.extract_changelog.outputs.CHANGELOG) }}
            }
        continue-on-error: true

      # Log whether the API update was successful
      - name: Log API Update Status
        run: |
          if [ "${{ steps.update_pockeat_web.outcome }}" == "success" ]; then
            echo "✅ Successfully updated Pockeat Web APK database"
            echo "Response: ${{ steps.update_pockeat_web.outputs.response }}"
          else
            echo "❌ Failed to update Pockeat Web APK database"
            echo "Error: ${{ steps.update_pockeat_web.outputs.error }}"
          fi
